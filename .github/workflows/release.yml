name: Release

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  check-release-label:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.release }}
      is-test: ${{ steps.check.outputs.test }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for release labels
        id: check
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          LABELS=$(gh pr view ${{ github.event.pull_request.number }} --json labels --jq '.labels[].name')

          if echo "$LABELS" | grep -q "^release$"; then
            echo "release=true" >> $GITHUB_OUTPUT
            echo "test=false" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "^test-release$"; then
            echo "release=true" >> $GITHUB_OUTPUT
            echo "test=true" >> $GITHUB_OUTPUT
          else
            echo "release=false" >> $GITHUB_OUTPUT
            echo "test=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-release-label
    if: needs.check-release-label.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: 1.8.25

      - name: Install dependencies
        run: uv sync --locked --all-extras --dev

      - name: Run tests
        run: uv run pytest tests -v

      - name: Build package
        run: uv build

      - name: Get version
        id: version
        run: |
          VERSION=$(uv version --short)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Package version: ${VERSION}"

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

    outputs:
      version: ${{ steps.version.outputs.version }}

  publish-pypi:
    needs: [check-release-label, build]
    if: needs.check-release-label.outputs.is-test == 'false'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    environment:
      name: pypi
      url: https://pypi.org/p/quarto-batch-convert

    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  publish-testpypi:
    needs: [check-release-label, build]
    if: needs.check-release-label.outputs.is-test == 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    environment:
      name: testpypi
      url: https://test.pypi.org/p/quarto-batch-convert

    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist/

  create-tag-and-release:
    needs: [check-release-label, build, publish-pypi]
    if: |
      always() &&
      needs.check-release-label.outputs.should-release == 'true' &&
      (needs.publish-pypi.result == 'success' || needs.publish-testpypi.result == 'success')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Create and push tag
        env:
          VERSION: ${{ needs.build.outputs.version }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git tag -a "v${VERSION}" -m "Release v${VERSION}"
          git push origin "v${VERSION}"

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
          VERSION: ${{ needs.build.outputs.version }}
        run: |
          RELEASE_TYPE="${{ needs.check-release-label.outputs.is-test == 'true' && 'test' || 'production' }}"

          gh release create "v${VERSION}" \
            --title "v${VERSION}" \
            --notes "Release v${VERSION} (${RELEASE_TYPE})

            Published from PR #${{ github.event.pull_request.number }}

            See [CHANGELOG](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details." \
            --draft=false \
            --prerelease=${{ needs.check-release-label.outputs.is-test == 'true' }}
